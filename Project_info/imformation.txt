** 1: 项目核心 - 愿景、用户与目标 (Project_Vision_User_Goals.txt)**

*   **项目愿景:** 开发一个个人使用的、AI 驱动的、基于 Web 技术 (HTML/CSS/JS) 的演示文稿创建与编辑工具。
*   **用户画像:**
    *   身份: 大一学生。
    *   专业背景: 非计算机专业。
    *   核心痛点: 对现有演示工具不满意——认为 PowerPoint 学习成本高且不易做出美观效果；认为 Gamma 等 AI 工具昂贵且可定制性弱。内心抵制使用 PowerPoint。
*   **核心动机与目标:**
    *   主要驱动力: 解决个人制作演示文稿的需求，特别是平时课程作业等场景。
    *   首要目标: **效率** - 希望能通过预设的美观模板和 AI 辅助，在数分钟内根据已有大纲快速生成美观的演示文稿初稿。
    *   次要/长期目标: **质量与定制性** - 如果愿意投入时间，希望能借助 AI 实现丰富的交互功能和极具美观甚至艺术感的演示效果。
*   **关键决策:**
    *   **已明确选择 Web 技术 (HTML/CSS/JS) 作为实现路线**，放弃了最初考虑的为 PowerPoint 等现有软件开发插件的方案。
*   **项目定位:**
    *   明确为**个人学习项目**，主要目的是通过实践学习 Web 开发和 AI 技术，并解决自身问题，而非商业创业。
    *   已接受学习过程本身就是重要收获，理解短期内投入时间会超过直接使用现有工具。

** 2: 技术路线 - Web 实现方案 (Tech_Path_Web_Implementation.txt)**

*   **选择 Web 技术的原因:**
    *   高度灵活性与控制力，不受特定软件功能限制。
    *   丰富的交互可能性和视觉效果潜力 (CSS/JS)。
    *   开源资源丰富 (框架、库)。
    *   易于版本控制 (Git)。
    *   跨平台兼容性 (浏览器)。
    *   AI 编辑潜力 (HTML/CSS/JS 代码对 AI 更友好)。
*   **核心功能 Web 实现思路概述:**
    *   **幻灯片结构:** 使用 HTML 容器 (`<section>` 或 `<div>`) 定义幻灯片，CSS 控制可见性 (一次一张)。
    *   **顺序导航:** 使用 HTML 按钮和 JS 事件监听实现上一页/下一页切换，JS 管理当前幻灯片索引。
    *   **视觉布局:** HTML 组织内容结构，重点使用 CSS (特别是 Flexbox 和 CSS Grid) 实现幻灯片内部元素的精确布局和排版。
    *   **逐步呈现 (动画/Builds):** HTML 添加标记 (如 `class="fragment"`), CSS 定义动画/过渡效果及初始/最终状态，JS 控制元素按需逐步显示。
    *   **主题与一致性:** CSS 定义全局样式，大量使用 CSS 变量 (Custom Properties) 实现易于切换的主题。
    *   **多媒体集成:** 直接使用 HTML 标签 (`<img>`, `<video>`)，利用 JS 图表库 (如 Chart.js) 生成图表。
*   **可参考的 Web 演示框架:**
    *   提到了 `reveal.js`, `impress.js`, `DeckDeckGo` 作为现有 Web 演示框架的例子，它们封装了许多核心功能。

** 3: AI 集成策略 (AI_Integration_Strategy.txt)**

*   **AI 在项目中的角色:**
    *   **核心 MVP 功能:** 根据用户提供的大纲，填充内容到预设的 HTML/CSS 模板中，快速生成演示文稿初稿。
    *   **辅助编辑:** 协助修改文本、调整样式、查找素材等（参考 Cursor 模式）。
    *   **未来潜力:** 辅助生成更复杂的交互效果、实现艺术感设计、代码生成/解释等。
*   **集成方式:**
    *   通过调用**大型语言模型 (LLM) 的 API** (如 OpenAI GPT, Google Gemini, Anthropic Claude)。
*   **关键技术点:**
    *   **Tool Calling / Function Calling:** 这是实现 AI 精确操作的关键。需要定义后端或前端 JS 可以执行的操作（如 `createSlide`, `addText`, `applyStyle`），让 LLM 根据自然语言指令选择调用哪个工具并提供参数。
    *   **Prompt Engineering:** 需要精心设计发送给 LLM 的 Prompt，使其理解演示文稿上下文、用户意图以及可用工具。
    *   **上下文管理:** 如何有效地将当前演示文稿的状态信息传递给 LLM 是一个挑战。
*   **交互模式设想:**
    *   类似 Cursor 的侧边栏聊天交互。
*   **注意事项:**
    *   安全管理 API Key。
    *   关注 API 调用成本和性能。
    *   处理 AI 可能的错误或无效输出。

** 4: 开发蓝图 - MVP 与学习路径 (Development_MVP_Learning_Path.txt)**

*   **开发方法论:**
    *   **从最小可行产品 (MVP) 开始:** 专注于最核心的功能，快速验证想法。
    *   **迭代开发:** 在 MVP 基础上逐步添加功能和改进。
*   **MVP 定义 (面向用户个人需求):**
    *   创建/管理基本的 HTML 幻灯片结构。
    *   能够应用用户自己预先设计的、美观的 CSS 模板。
    *   通过调用 AI API，根据用户输入的大纲填充文本内容到模板中。
    *   实现基本的幻灯片顺序导航 (上一页/下一页)。
    *   *目标:* 实现“数分钟内根据大纲建立美观初稿”的核心效率需求。
*   **已确认的学习路径 (按顺序):**
    1.  **HTML:** 学习基础标签，构建静态页面结构。
    2.  **CSS:** 学习样式和布局 (特别是 Flexbox)，制作美观的模板。
    3.  **JavaScript (基础):** 学习 DOM 操作和事件监听，实现幻灯片切换等基本交互。
    4.  **API 调用 (JS):** 学习使用 `fetch` 调用 LLM API，处理 JSON 数据。
    5.  **整合:** 将 AI 生成的内容动态填充到 HTML 模板中。
*   **长期目标 (MVP 之后):**
    *   实现丰富的交互功能。
    *   追求更美观、有艺术感的演示效果。
    *   探索可视化编辑 (WYSIWYG) 的可能性。
*   **推荐的基础工具:**
    *   代码编辑器: VS Code。
    *   版本控制: Git / GitHub。
*   **推荐的学习资源:**
    *   MDN Web Docs, freeCodeCamp, JavaScript.info。

** 5: 相关工具与概念讨论记录 (Tools_Concepts_Discussed.txt)**

*   **Onlook (onlook-dev/onlook):**
    *   定位: 开源、本地优先、面向 React (+Tailwind) 应用的可视化/AI 辅助编辑器，类似面向设计师的 Cursor 或 Webflow 替代品。
    *   讨论结论:
        *   技术方向 (Web+AI+WYSIWYG) 与本项目有重叠，是重要的**灵感来源**。
        *   许可 (Apache 2.0) 允许学习和修改其代码。
        *   **不适合直接作为本项目的内嵌编辑器或最终产品**，因为它是一个独立的、面向 React 开发者的工具。
        *   可以**辅助开发本项目自身的 UI** (如果本项目用 React 构建)，或者通过**学习其源码**借鉴实现思路。
*   **React:**
    *   解释: 一个用于构建用户界面的 JavaScript **库**，通过组件化、声明式编程和虚拟 DOM 提高开发效率。
    *   与 HTML/CSS/JS 的关系: React 构建在 JS 之上，最终渲染成标准的 HTML/CSS，并非替代关系，而是一个抽象层。
*   **传统演示软件 (PowerPoint):**
    *   用户的态度: 内心抵制，认为学习曲线陡峭且不易做出满意效果。
    *   与 Web 方案对比: 功能上限、交互性、灵活性不如 Web 技术，但易用性、标准化程度和生态系统更成熟。
*   **AI 演示工具 (Gamma, Tome等):**
    *   用户的评价: 易用但价格昂贵，且可定制性太弱，无法满足个性化需求。
*   **Web 演示框架 (reveal.js, impress.js):**
    *   提及作为现有 Web 技术实现演示文稿的成功例子，可以参考其功能和实现。

